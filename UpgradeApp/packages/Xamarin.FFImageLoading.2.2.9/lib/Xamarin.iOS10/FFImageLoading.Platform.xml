<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FFImageLoading.Platform</name>
    </assembly>
    <members>
        <member name="T:FFImageLoading.Cache.SimpleDiskCache">
            <summary>
            Disk cache iOS/Android implementation.
            </summary>
        </member>
        <member name="M:FFImageLoading.Cache.SimpleDiskCache.#ctor(System.String,FFImageLoading.Config.Configuration)">
            <summary>
            Initializes a new instance of the <see cref="T:FFImageLoading.Cache.SimpleDiskCache"/> class.
            </summary>
            <param name="cachePath">Cache path.</param>
        </member>
        <member name="M:FFImageLoading.Cache.SimpleDiskCache.CreateCache(System.String,FFImageLoading.Config.Configuration)">
            <summary>
            Creates new cache default instance.
            </summary>
            <returns>The cache.</returns>
            <param name="cacheName">Cache name.</param>
        </member>
        <member name="M:FFImageLoading.Cache.SimpleDiskCache.AddToSavingQueueIfNotExistsAsync(System.String,System.Byte[],System.TimeSpan,System.Action)">
            <summary>
            Adds the file to cache and file saving queue if it does not exists.
            </summary>
            <param name="key">Key to store/retrieve the file.</param>
            <param name="bytes">File data in bytes.</param>
            <param name="duration">Specifies how long an item should remain in the cache.</param>
        </member>
        <member name="M:FFImageLoading.Cache.SimpleDiskCache.RemoveAsync(System.String)">
            <summary>
            Removes the specified cache entry.
            </summary>
            <param name="key">Key.</param>
        </member>
        <member name="M:FFImageLoading.Cache.SimpleDiskCache.ClearAsync">
            <summary>
            Clears all cache entries.
            </summary>
        </member>
        <member name="M:FFImageLoading.Cache.SimpleDiskCache.ExistsAsync(System.String)">
            <summary>
            Checks if cache entry exists/
            </summary>
            <returns>The async.</returns>
            <param name="key">Key.</param>
        </member>
        <member name="M:FFImageLoading.Cache.SimpleDiskCache.TryGetStreamAsync(System.String)">
            <summary>
            Tries to get cached file as stream.
            </summary>
            <returns>The get stream.</returns>
            <param name="key">Key.</param>
        </member>
        <member name="M:FFImageLoading.TaskParameterExtensions.Into(FFImageLoading.Work.TaskParameter,UIKit.UIImageView,System.Single)">
            <summary>
            Loads the image into given imageView using defined parameters.
            </summary>
            <param name="parameters">Parameters for loading the image.</param>
            <param name="imageView">Image view that should receive the image.</param>
            <param name="imageScale">Optional scale factor to use when interpreting the image data. If unspecified it will use the device scale (ie: Retina = 2, non retina = 1)</param>
        </member>
        <member name="M:FFImageLoading.TaskParameterExtensions.Into(FFImageLoading.Work.TaskParameter,UIKit.UITabBarItem,System.Single)">
            <summary>
            Loads the image into given imageView using defined parameters.
            </summary>
            <param name="parameters">Parameters for loading the image.</param>
            <param name="imageView">Image view that should receive the image.</param>
            <param name="imageScale">Optional scale factor to use when interpreting the image data. If unspecified it will use the device scale (ie: Retina = 2, non retina = 1)</param>
        </member>
        <member name="M:FFImageLoading.TaskParameterExtensions.Into(FFImageLoading.Work.TaskParameter,UIKit.UIButton,System.Single)">
            <summary>
            Loads the image into given UIButton using defined parameters.
            </summary>
            <param name="parameters">Parameters for loading the image.</param>
            <param name="button">UIButton that should receive the image.</param>
            <param name="imageScale">Optional scale factor to use when interpreting the image data. If unspecified it will use the device scale (ie: Retina = 2, non retina = 1)</param>
        </member>
        <member name="M:FFImageLoading.TaskParameterExtensions.IntoAsync(FFImageLoading.Work.TaskParameter,UIKit.UIImageView,System.Single)">
            <summary>
            Loads the image into given imageView using defined parameters.
            IMPORTANT: It throws image loading exceptions - you should handle them
            </summary>
            <returns>An awaitable Task.</returns>
            <param name="parameters">Parameters for loading the image.</param>
            <param name="imageView">Image view that should receive the image.</param>
            <param name="imageScale">Optional scale factor to use when interpreting the image data. If unspecified it will use the device scale (ie: Retina = 2, non retina = 1)</param>
        </member>
        <member name="M:FFImageLoading.TaskParameterExtensions.AsUIImageAsync(FFImageLoading.Work.TaskParameter,System.Single)">
            <summary>
            Loads and gets UIImage using defined parameters.
            IMPORTANT: It throws image loading exceptions - you should handle them
            </summary>
            <returns>The UIImage async.</returns>
            <param name="parameters">Parameters.</param>
            <param name="imageScale">Image scale.</param>
        </member>
        <member name="M:FFImageLoading.TaskParameterExtensions.IntoAsync(FFImageLoading.Work.TaskParameter,UIKit.UIButton,System.Single)">
            <summary>
            Loads the image into given UIButton using defined parameters.
            IMPORTANT: It throws image loading exceptions - you should handle them
            </summary>
            <returns>An awaitable Task.</returns>
            <param name="parameters">Parameters for loading the image.</param>
            <param name="button">UIButton that should receive the image.</param>
            <param name="imageScale">Optional scale factor to use when interpreting the image data. If unspecified it will use the device scale (ie: Retina = 2, non retina = 1)</param>
        </member>
        <member name="M:FFImageLoading.TaskParameterExtensions.InvalidateAsync(FFImageLoading.Work.TaskParameter,FFImageLoading.Cache.CacheType)">
            <summary>
            Invalidate the image corresponding to given parameters from given caches.
            </summary>
            <param name="parameters">Image parameters.</param>
            <param name="cacheType">Cache type.</param>
        </member>
        <member name="M:FFImageLoading.TaskParameterExtensions.Preload(FFImageLoading.Work.TaskParameter)">
            <summary>
            Preloads the image request into memory cache/disk cache for future use.
            </summary>
            <param name="parameters">Image parameters.</param>
        </member>
        <member name="M:FFImageLoading.TaskParameterExtensions.PreloadAsync(FFImageLoading.Work.TaskParameter)">
            <summary>
            Preloads the image request into memory cache/disk cache for future use.
            IMPORTANT: It throws image loading exceptions - you should handle them
            </summary>
            <param name="parameters">Image parameters.</param>
        </member>
        <member name="M:FFImageLoading.TaskParameterExtensions.DownloadOnly(FFImageLoading.Work.TaskParameter)">
            <summary>
            Downloads the image request into disk cache for future use if not already exists.
            Only Url Source supported.
            </summary>
            <param name="parameters">Image parameters.</param>
        </member>
        <member name="M:FFImageLoading.TaskParameterExtensions.DownloadOnlyAsync(FFImageLoading.Work.TaskParameter)">
            <summary>
            Downloads the image request into disk cache for future use if not already exists.
            Only Url Source supported.
            IMPORTANT: It throws image loading exceptions - you should handle them
            </summary>
            <param name="parameters">Image parameters.</param>
        </member>
        <member name="M:FFImageLoading.TaskParameterExtensions.AsPNGStreamAsync(FFImageLoading.Work.TaskParameter)">
            <summary>
            Loads the image into PNG Stream
            </summary>
            <returns>The PNGS tream async.</returns>
            <param name="parameters">Parameters.</param>
        </member>
        <member name="M:FFImageLoading.TaskParameterExtensions.AsJPGStreamAsync(FFImageLoading.Work.TaskParameter,System.Int32)">
            <summary>
            Loads the image into JPG Stream
            </summary>
            <returns>The JPG Stream async.</returns>
            <param name="parameters">Parameters.</param>
        </member>
        <member name="P:FFImageLoading.ImageService.Config">
            <summary>
            Gets FFImageLoading configuration
            </summary>
            <value>The configuration used by FFImageLoading.</value>
        </member>
        <member name="M:FFImageLoading.ImageService.Initialize">
            <summary>
            Initializes FFImageLoading with a default Configuration. 
            Also forces to run disk cache cleaning routines (avoiding delay for first image loading tasks)
            </summary>
            <param name="configuration">Configuration.</param>
        </member>
        <member name="M:FFImageLoading.ImageService.Initialize(FFImageLoading.Config.Configuration)">
            <summary>
            Initializes FFImageLoading with a given Configuration. It allows to configure and override most of it.
            Also forces to run disk cache cleaning routines (avoiding delay for first image loading tasks)
            </summary>
            <param name="configuration">Configuration.</param>
        </member>
        <member name="M:FFImageLoading.ImageService.LoadFile(System.String)">
            <summary>
            Constructs a new TaskParameter to load an image from a file.
            </summary>
            <returns>The new TaskParameter.</returns>
            <param name="filepath">Path to the file.</param>
        </member>
        <member name="M:FFImageLoading.ImageService.LoadUrl(System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Constructs a new TaskParameter to load an image from a URL.
            </summary>
            <returns>The new TaskParameter.</returns>
            <param name="url">URL to the file</param>
            <param name="cacheDuration">How long the file will be cached on disk</param>
        </member>
        <member name="M:FFImageLoading.ImageService.LoadFileFromApplicationBundle(System.String)">
            <summary>
            Constructs a new TaskParameter to load an image from a file from application bundle.
            </summary>
            <returns>The new TaskParameter.</returns>
            <param name="filepath">Path to the file.</param>
        </member>
        <member name="M:FFImageLoading.ImageService.LoadCompiledResource(System.String)">
            <summary>
            Constructs a new TaskParameter to load an image from a compiled drawable resource.
            </summary>
            <returns>The new TaskParameter.</returns>
            <param name="resourceName">Name of the resource in drawable folder without extension</param>
        </member>
        <member name="M:FFImageLoading.ImageService.LoadStream(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{System.IO.Stream}})">
            <summary>
            Constructs a new TaskParameter to load an image from a Stream.
            </summary>
            <returns>The new TaskParameter.</returns>
            <param name="resourceName">A function that allows a CancellationToken and returns the Stream to use. This function will be invoked by LoadStream().</param>
        </member>
        <member name="P:FFImageLoading.ImageService.ExitTasksEarly">
            <summary>
            Gets a value indicating whether ImageService will exit tasks earlier
            </summary>
            <value><c>true</c> if it should exit tasks early; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:FFImageLoading.ImageService.SetExitTasksEarly(System.Boolean)">
            <summary>
            Sets a value indicating whether ImageService will exit tasks earlier
            </summary>
            <param name="exitTasksEarly">If set to <c>true</c> exit tasks early.</param>
        </member>
        <member name="M:FFImageLoading.ImageService.SetPauseWork(System.Boolean)">
            <summary>
            Sets a value indicating if all loading work should be paused (silently canceled).
            </summary>
            <param name="pauseWork">If set to <c>true</c> pause/cancel work.</param>
        </member>
        <member name="P:FFImageLoading.ImageService.PauseWork">
            <summary>
            Gets a value indicating whether this ImageService will pause tasks execution.
            </summary>
            <value><c>true</c> if pause work; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:FFImageLoading.ImageService.CancelWorkFor(FFImageLoading.Work.IImageLoaderTask)">
            <summary>
            Cancel any loading work for the given ImageView
            </summary>
            <param name="task">Image loading task to cancel.</param>
        </member>
        <member name="M:FFImageLoading.ImageService.RemovePendingTask(FFImageLoading.Work.IImageLoaderTask)">
            <summary>
            Removes a pending image loading task from the work queue.
            </summary>
            <param name="task">Image loading task to remove.</param>
        </member>
        <member name="M:FFImageLoading.ImageService.LoadImage(FFImageLoading.Work.IImageLoaderTask)">
            <summary>
            Queue an image loading task.
            </summary>
            <param name="task">Image loading task.</param>
        </member>
        <member name="M:FFImageLoading.ImageService.InvalidateCacheAsync(FFImageLoading.Cache.CacheType)">
            <summary>
            Invalidates selected caches.
            </summary>
            <returns>An awaitable task.</returns>
            <param name="cacheType">Memory cache, Disk cache or both</param>
        </member>
        <member name="M:FFImageLoading.ImageService.InvalidateMemoryCache">
            <summary>
            Invalidates the memory cache.
            </summary>
        </member>
        <member name="M:FFImageLoading.ImageService.InvalidateDiskCacheAsync">
            <summary>
            Invalidates the disk cache.
            </summary>
        </member>
        <member name="M:FFImageLoading.ImageService.InvalidateCacheEntryAsync(System.String,FFImageLoading.Cache.CacheType,System.Boolean)">
            <summary>
            Invalidates the cache for given key.
            </summary>
            <returns>The async.</returns>
            <param name="key">Concerns images with this key.</param>
            <param name="cacheType">Memory cache, Disk cache or both</param>
            <param name="removeSimilar">If similar keys should be removed, ie: typically keys with extra transformations</param>
        </member>
        <member name="M:FFImageLoading.ImageService.Cancel(System.Func{FFImageLoading.Work.IImageLoaderTask,System.Boolean})">
            <summary>
            Cancels tasks that match predicate.
            </summary>
            <param name="predicate">Predicate for finding relevant tasks to cancel.</param>
        </member>
        <member name="M:FFImageLoading.ImageService.Cancel(System.Func{FFImageLoading.Work.TaskParameter,System.Boolean})">
            <summary>
            Cancels tasks that match predicate.
            </summary>
            <param name="predicate">Predicate for finding relevant tasks to cancel.</param>
        </member>
    </members>
</doc>
